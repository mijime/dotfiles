#!/usr/bin/env bash

case "$(uname)" in
Darwin)
  if type reattach-to-user-namespace 1>/dev/null 2>/dev/null; then
    alias tmux='reattach-to-user-namespace tmux'
  fi
  export HOMEBREW_CASK_OPTS='--appdir=~/Applications --fontdir=/Library/Fonts'
  ;;
Linux)
  alias open=xdg-open
  export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
  ;;
*) ;;
esac

if ! type brew 1>/dev/null 2>/dev/null; then
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

homebrew_prefix=$(brew --prefix)
export PATH="${homebrew_prefix}/bin:${homebrew_prefix}/sbin:${PATH}"
export PATH="${homebrew_prefix}/opt/openssl/bin:${PATH}"
export PATH="${homebrew_prefix}/opt/coreutils/libexec/gnubin:${PATH}"
export MANPATH="${homebrew_prefix}/opt/coreutils/libexec/gnuman:${MANPATH}"
for cmp in "${homebrew_prefix}/etc/bash_completion.d"/*; do source "${cmp}"; done

export PATH="${PATH}:${HOME}/.dotfiles/bin:${HOME}/.dotfiles/node_modules/.bin"

if type exa >/dev/null 2>&1; then
  alias ls='exa --git'
fi
alias ll='ls -l'
export TRASH_DIR=${HOME}/.Trash
alias rm='mv --backup=numbered --target-directory=${TRASH_DIR}'

a9e_cd() {
  case $1 in
  -) popd >/dev/null || return 1 ;;
  -v | -c) dirs "$@" ;;
  --list | -l)
    dirs -v | awk '!v[$NF]{v[$NF]=1;print$0}'
    ;;
  --save | -S)
    dirs -v -l | awk '!v[$NF]{v[$NF]=1;print$NF}' | head -n 100 | tee -a "${HOME}/.cd_history"
    ;;
  --load | -L)
    shift
    for v in $(tail -n 1000 "${@:-"${HOME}/.cd_history"}" | awk '!v[$NF]{v[$NF]=1;print$NF}'); do
      if [[ -d "$v" ]]; then
        pushd -n "$v" >/dev/null || true
      fi
    done
    ;;
  --fzf | -F)
    shift
    pushd "$({
      dirs -v -l | awk '!v[$NF]{v[$NF]=1;print$NF}'
    } | fzf --select-1 --query "$*")" >/dev/null || return 1
    ;;
  -P)
    shift
    \cd "$@" >/dev/null || return 1
    pushd . >/dev/null || return 1
    ;;
  *)
    pushd "$@" >/dev/null || return 1
    ;;
  esac
}

trap "a9e_cd --save >/dev/null" EXIT
touch ~/.cd_history
a9e_cd --load >/dev/null
alias cd=a9e_cd

# ssh config

__create_ssh_private() {
  local ssh_project=${SSH_PROJECT:-~/.ssh/projects}
  local host=localhost
  local algo=ed25519
  local comment=

  while [[ $# -gt 0 ]]; do
    case $1 in
    --project | -p)
      ssh_project=$2
      shift 2 || return 1
      ;;
    -t)
      algo=$2
      shift 2 || return 1
      ;;
    -h | --host)
      host=$2
      shift 2 || return 1
      ;;
    -C | --comment)
      comment=$2
      shift 2 || return 1
      ;;
    -*)
      echo "[ERROR] unsupported arguments: $1" >&2
      return 1
      ;;
    *)
      host=$1
      shift || return 1
      ;;
    esac
  done

  dir="${ssh_project}/${host/\*/_}"
  mkdir -p "${dir}"

  keyname=${dir}/id_${algo}
  ssh-keygen -t "${algo}" -f "${keyname}" -N "" -C "${comment}"

  ssh_config=${dir}/ssh_config
  if [[ ! -f ${ssh_config} ]]; then
    cat <<EOF >"${ssh_config}"
Host ${host}
  IdentityFile ${keyname}
EOF
  fi

  (
    cd "${ssh_project}" || return 1
    git init || true
    git add -A
    git commit --allow-empty --message "Add ${host}"
  )
}

__create_ssh_config() {
  local ssh_project=~/.ssh/projects
  local ssh_config=~/.ssh/config

  while [[ $# -gt 0 ]]; do
    case $1 in
    --project | -p)
      ssh_project=$2
      shift 2 || return 1
      ;;

    --config | -c)
      ssh_config=$2
      shift 2 || return 1
      ;;

    *)
      echo "[ERROR] $*" 1>&2
      return 1
      ;;
    esac
  done

  mkdir -p "${ssh_project}"
  find "${ssh_project}" -name ssh_config |
    sort -r |
    xargs cat >"${ssh_config}"
}

__create_ssh_config "$@"

# history settings

shopt -u histappend
share_history() {
  history -a
  history -c
  history -r
}
PROMPT_COMMAND='share_history'
HISTSIZE=1000000000
HISTFILESIZE=1000000000
HISTTIMEFORMAT='[%F %T %Z]  '
HISTIGNORE='l[sla]:history:pwd:exit:cd:[bf]g:jobs'
HISTCONTROL='ignoredups:ignorespace:erasedups'

export FZF_CTRL_T_COMMAND='git ls-files 2>/dev/null || rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_OPTS='--preview "bat --color=always --style=header,grid --line-range :100 {}"'

for localrc in ~/.bashrc.local ~/.dockerrc; do
  if [[ -f ${localrc} ]]; then
    source ${localrc}
  fi
done

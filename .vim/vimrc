augroup MyAutoCmd
  autocmd!
augroup END

set bs=2
set list listchars=tab:>\ ,trail:-,nbsp:%,extends:>,precedes:<
set autoindent smartindent cindent
set tabstop=2 shiftwidth=2 softtabstop=0 expandtab smarttab
set number ruler title laststatus=2
set nocursorline nocursorcolumn
set noshowcmd

" Encoding
if &encoding !=? 'utf-8' | let &termencoding = &encoding | end
set encoding=utf-8 fileencoding=utf-8 fileformats=unix,mac,dos
set fileencodings=utf-8,iso-2022-jp-3,euc-jisx0213,cp932,euc-jp,sjis,jis,latin,iso-2022-jp

" Performance
set updatetime=300 timeout timeoutlen=500 ttimeout ttimeoutlen=50 ttyfast nolazyredraw

" Search
set wrapscan incsearch hlsearch magic

" Cache
let $cache = expand('~/.cache/backup')
if !isdirectory($cache) | call mkdir($cache, 'p') | end
set history=1000 viminfo='10,/100,:1000,<10,@10,s10,h,n$cache/.viminfo
set nospell  spellfile=$cache/en.utf-8.add
set swapfile directory=$cache/swap,$cache,/var/tmp/vim,/var/tmp
set nobackup backupdir=$cache/backup,$cache,/var/tmp/vim,/var/tmp
set undofile undolevels=1000 undodir=$cache/undo,$cache,/var/tmp/vim,/var/tmp

" Movement
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>

nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv

nmap <Space> <Leader>
vmap <Space> <Leader>

syntax on

if has('vim_starting')
  set rtp+=~/.cache/plugged/vim-plug
  if !isdirectory(expand('~/.cache/plugged/vim-plug'))
    echo 'install vim-plug...'
    call system('mkdir -p ~/.cache/plugged/vim-plug')
    call system('git clone https://github.com/junegunn/vim-plug.git ~/.cache/plugged/vim-plug/autoload')
  end
endif

call plug#begin('~/.cache/plugged')
  Plug 'junegunn/vim-plug',
       \ {'dir': '~/.cache/plugged/vim-plug/autoload'}
  Plug 'junegunn/seoul256.vim'
  augroup MyAutoCmd
    autocmd VimEnter * nested colo seoul256
  augroup END

  Plug 'junegunn/goyo.vim', {'on':['Goyo']}
  augroup MyAutoCmd
    autocmd User GoyoEnter Limelight
    autocmd User GoyoLeave Limelight!
  augroup END

  Plug 'junegunn/limelight.vim', {'on':['Limelight']}
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim'
  augroup MyFzfSettings
    autocmd!
    command! -bang -nargs=* GGrep
          \ call fzf#vim#grep(
          \   'git grep --line-number '.shellescape(<q-args>), 0,
          \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
  augroup END
  Plug 'junegunn/vim-easy-align', {'on':['EasyAlign']}
  Plug 'junegunn/gv.vim', {'on':['GV']}

  Plug 'tpope/vim-fugitive'

  Plug 'itchyny/lightline.vim'
  let g:lightline={
        \ 'colorscheme':'seoul256',
        \ 'active': {'left':[['mode','paste'],['readonly','filepath','modified']]},
        \ 'component_function': {
        \ 'filepath': 'FilePathForLightline'
        \ }
        \ }
  function! FilePathForLightline()
    let path = expand('%')
    let pathlen = len(path)
    let winlen = winwidth(0)/3
    if pathlen > winlen
      return '...'.path[pathlen-winlen:pathlen]
    endif
    return path
  endfunction

  Plug 'previm/previm', {'for':['markdown']}
  augroup MyAutoCmd
    autocmd FileType markdown setlocal sw=4 sts=4 ts=4 et
  augroup END
  Plug 'tyru/open-browser.vim'

  Plug 'tpope/vim-dispatch'
  " Plug 'scrooloose/nerdtree'
  let g:netrw_liststyle = 3

  Plug 'udalov/kotlin-vim', {'for':['kotlin']}
  augroup MyKotlin
    au!
    autocmd BufRead,BufNewFile *.kt set filetype=kotlin
  augroup END

  Plug 'tpope/vim-speeddating', {'for':['org']}
  Plug 'jceb/vim-orgmode', {'for':['org']}
  let g:org_agenda_files=['~/org/*.org']

  Plug 'OmniSharp/omnisharp-vim', {'for':['cs']}
  let g:OmniSharp_selector_ui = 'fzf'

  Plug 'thinca/vim-quickrun', {'on':['QuickRun']}
  Plug 'digitaltoad/vim-pug', {'for':['pug']}
  augroup MyPug
    au!
    autocmd BufRead,BufNewFile *.pug set filetype=pug
  augroup END

  Plug 'baabelfish/nvim-nim', {'for':['nim']}
  Plug 'cespare/vim-toml', {'for':['toml']}
  Plug 'hashivim/vim-terraform', {'for':['tf']}
  let g:terraform_align       = 1
  let g:terraform_fmt_on_save = 1

  Plug 'dense-analysis/ale'
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_linters = {'go': ['gofmt', 'goimports', 'go vet', 'golint', 'golangci-lint']}

  Plug 'haya14busa/vim-auto-programming'
  set completefunc=autoprogramming#complete

  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  let g:lsp_diagnostics_enabled = 0

  " Plug 'fatih/vim-go', {'for':['go'], 'do':':GoInstallBinaries'}
  " let g:go_fmt_command = 'goimports'
  " let g:go_def_mode    = 'gopls'
  " let g:go_info_mode   = 'gopls'

  Plug 'rhysd/vim-goyacc', {'for':['goyacc']}
  autocmd FileType goyacc setlocal noexpandtab
  if executable('bingo')
    augroup LspGo
      au!
      autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'bingo',
            \ 'cmd': {server_info->['bingo', '-mode', 'stdio']},
            \ 'whitelist': ['go'],
            \ })
      autocmd FileType go setlocal noexpandtab
      autocmd FileType go setlocal omnifunc=lsp#complete
      autocmd FileType go nmap <C-]> :LspDefinition<CR>
      autocmd FileType go nmap K :LspHover<CR>
      autocmd FileType go nmap ]] :LspDocumentSymbol<CR>
      autocmd BufWritePre *.go LspDocumentFormatSync
    augroup END
  endif

  Plug 'prettier/vim-prettier', {'do': 'npm install'}
  Plug 'leafgarland/typescript-vim', {'for':['typescript']}
  autocmd BufRead,BufNewFile *.tsx set filetype=typescript
  if executable('typescript-language-server')
    augroup LspTypeScript
      au!
      autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'typescript-language-server',
            \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
            \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
            \ 'whitelist': ['typescript', 'typescript.tsx'],
            \ })
      autocmd FileType typescript set omnifunc=lsp#complete
      autocmd FileType typescript nmap <C-]> :LspDefinition<CR>
      autocmd FileType typescript nmap K :LspHover<CR>
      autocmd FileType typescript nmap ]] :LspDocumentSymbol<CR>
    augroup END
  endif
  Plug 'ElmCast/elm-vim', {'for': 'elm'}
call plug#end()


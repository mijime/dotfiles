#!/usr/bin/env bash

set -Eeuo pipefail

slack_profile=${SLACK_BEAREQ_PROFILE:-"default"}
slack_channel=${SLACK_CHANNEL:-""}

beareq_cache_key=$(date +%F)
beareq_with_cache() {
  cache_file="/tmp/$(basename "$0")-$(echo "$* ${slack_profile} ${beareq_cache_key}" | md5sum | awk '{print$1}').dat"
  if [[ ! -f "${cache_file}" ]]; then
    beareq "${@}" >"${cache_file}"
  fi
  cat "${cache_file}"
}

user_profiles_set() {
  status_text=${slack_message}
  if [[ -n ${slack_emoji} ]]; then
    status_emoji=":${slack_emoji}:"
  else
    status_emoji=""
  fi
  if [[ -n ${slack_expired} ]]; then
    status_expiration=$(date +%s --date "${slack_expired}")
  else
    status_expiration=0
  fi
  resp=$(
    echo -n "{\"profile\":{\"status_text\":\"${status_text}\",\"status_emoji\":\"${status_emoji}\",\"status_expiration\":${status_expiration}}}" |
      beareq \
        --fail \
        --profile "${slack_profile}" \
        --data @- \
        --request POST \
        --header "Content-Type: application/json; charset=utf-8;" \
        "https://slack.com/api/users.profile.set"
  )
  echo "${resp}" | jq -r

  is_ok=$(echo "${resp}" | jq -rc .ok)
  if [[ ${is_ok} != "true" ]]; then
    echo "[E] failed to set user profiles" >&2
    exit 1
  fi
}

users_conversations() {
  next_cursor=
  seq "${slack_page}" | while read -r _; do
    resp=$(
      if [[ -z ${next_cursor} ]]; then
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/users.conversations?types=public_channel,private_channel&exclude_archived=true"
      else
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/users.conversations?types=public_channel,private_channel&exclude_archived=true&cursor=${next_cursor}"
      fi
    )
    echo "${resp}" | jq -r

    is_ok=$(echo "${resp}" | jq -rc .ok)
    if [[ ${is_ok} != "true" ]]; then
      echo "[E] failed to get user conversations" >&2
      exit 1
    fi

    next_cursor=$(echo "${resp}" | jq -rc .response_metadata.next_cursor)
    if [[ -z ${next_cursor} ]]; then
      break
    fi
  done
}

conversations_history() {
  beareq_cache_key=$(date +%F-%H)
  next_cursor=
  seq "${slack_page}" | while read -r _; do
    resp=$(
      if [[ -z ${next_cursor} ]]; then
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/conversations.history?channel=${slack_channel}&limit=${slack_limit}"
      else
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/conversations.history?channel=${slack_channel}&limit=${slack_limit}&cursor=${next_cursor}"
      fi
    )
    echo "${resp}" | jq -r

    is_ok=$(echo "${resp}" | jq -rc .ok)
    if [[ ${is_ok} != "true" ]]; then
      echo "[E] failed to get conversations history" >&2
      exit 1
    fi

    next_cursor=$(echo "${resp}" | jq -rc .response_metadata.next_cursor)
    if [[ -z ${next_cursor} ]]; then
      break
    fi
  done
}

conversations_replies() {
  beareq_cache_key=$(date +%F-%H)
  next_cursor=
  seq "${slack_page}" | while read -r _; do
    resp=$(
      if [[ -z ${next_cursor} ]]; then
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/conversations.replies?channel=${slack_channel}&ts=${slack_message_ts}&limit=${slack_limit}"
      else
        beareq_with_cache \
          --fail \
          --profile "${slack_profile}" \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/conversations.replies?channel=${slack_channel}&ts=${slack_message_ts}&limit=${slack_limit}&cursor=${next_cursor}"
      fi
    )
    echo "${resp}" | jq -r

    is_ok=$(echo "${resp}" | jq -rc .ok)
    if [[ ${is_ok} != "true" ]]; then
      echo "[E] failed to get conversations replies" >&2
      exit 1
    fi

    next_cursor=$(echo "${resp}" | jq -rc .response_metadata.next_cursor)
    if [[ -z ${next_cursor} ]]; then
      break
    fi
  done

}

search_messages() {
  slack_query=${slack_message}
  resp=$(
    beareq_with_cache \
      --fail \
      --profile "${slack_profile}" \
      --header "Content-Type: application/json; charset=utf-8;" \
      "https://slack.com/api/search.messages?query=${slack_query}"
  )
  echo "${resp}" | jq -r

  is_ok=$(echo "${resp}" | jq -rc .ok)
  if [[ ${is_ok} != "true" ]]; then
    echo "[E] failed to search messages" >&2
    exit 1
  fi
}

reactions_add() {
  slack_reaction=${slack_emoji:-${slack_message}}
  resp=$(
    echo "{\"channel\":\"${slack_channel}\",\"timestamp\":\"${slack_message_ts}\",\"name\":\"${slack_reaction}\"}" |
      beareq \
        --fail \
        --profile "${slack_profile}" \
        --data @- \
        --request POST \
        --header "Content-Type: application/json; charset=utf-8;" \
        "https://slack.com/api/reactions.add"
  )
  echo "${resp}" | jq -r

  is_ok=$(echo "${resp}" | jq -rc .ok)
  if [[ ${is_ok} != "true" ]]; then
    echo "[E] failed to add reactions" >&2
    exit 1
  fi
}

chat_post_message() {
  if [[ -n ${slack_message} ]]; then
    text=${slack_message}
  elif [[ -p /dev/stdin ]]; then
    text=$(cat)
  else
    slack_message_edit=1
  fi

  if [[ -n ${slack_message_edit} ]]; then
    tmpfile=$(mktemp --suffix=.md)
    echo "${text:-""}" >"${tmpfile}"
    ${EDITOR:-vim} "${tmpfile}"
    text=$(cat <"${tmpfile}")
    rm "${tmpfile}"
  fi

  if [[ -z ${text} ]]; then
    echo "[E] not found input text" >&2
    exit 1
  fi

  ascii_text=$(echo -ne "${text}" | perl -C7 -ne 'for(split(//)){print sprintf("\\u%04X",ord)}')
  resp=$(
    if [[ -z ${slack_message_ts} ]]; then
      echo -n "{\"channel\":\"${slack_channel}\",\"text\":\"${ascii_text}\"}" |
        jq -r |
        beareq \
          --fail \
          --profile "${slack_profile}" \
          --data @- \
          --request POST \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/chat.postMessage"
    else
      echo -n "{\"channel\":\"${slack_channel}\",\"text\":\"${ascii_text}\",\"thread_ts\":\"${slack_message_ts}\"}" |
        jq -r |
        beareq \
          --fail \
          --profile "${slack_profile}" \
          --data @- \
          --request POST \
          --header "Content-Type: application/json; charset=utf-8;" \
          "https://slack.com/api/chat.postMessage"
    fi
  )
  echo "${resp}" | jq -r

  is_ok=$(echo "${resp}" | jq -rc .ok)
  if [[ ${is_ok} != "true" ]]; then
    echo "[E] failed to chat post message" >&2
    exit 1
  fi
}

slack_page=1
slack_message_ts=
slack_message_edit=
slack_message=
slack_cmd=conversations_history
slack_limit=20
slack_emoji=
slack_expired=
while [[ $# -gt 0 ]]; do
  case $1 in
  --page) slack_page=$2 && shift ;;
  --limit) slack_limit=$2 && shift ;;
  -p | --profile) slack_profile=$2 && shift ;;
  -c | --channel) slack_channel=$2 && shift ;;
  -m | --message) slack_message=$2 && shift ;;
  -e | --emoji) slack_emoji=$2 && shift ;;
  -t | --timestamp) slack_message_ts=$2 && shift ;;
  --expired) slack_expired=$2 && shift ;;
  --edit) slack_message_edit=1 ;;

  -*)
    echo "[E] unsupported $*" >&2
    exit 1
    ;;

  status) slack_cmd=user_profiles_set ;;
  channels) slack_cmd=users_conversations ;;
  search) slack_cmd=search_messages ;;
  post) slack_cmd=chat_post_message ;;
  messages) slack_cmd=conversations_history ;;
  replies) slack_cmd=conversations_replies ;;
  reaction) slack_cmd=reactions_add ;;
  reply) slack_cmd=chat_post_message__reply ;;
  *) slack_message=$1 ;;
  esac
  shift
done

case ${slack_cmd} in
user_profiles_set)
  user_profiles_set
  exit
  ;;
users_conversations)
  users_conversations |
    jq -rc ".channels[]|[.id,.name]|@tsv"
  exit
  ;;
esac

if [[ -z ${slack_channel} ]]; then
  slack_channel=$(
    users_conversations |
      jq -rc ".channels[]|[.id,.name]|@tsv" |
      fzf --select-1 |
      awk -F"\t" '{print$1}'
  )
fi

case ${slack_cmd} in
conversations_history)
  conversations_history |
    jq -rc ".messages[]|[.ts,.user,.text]|@tsv"
  exit
  ;;
chat_post_message)
  chat_post_message
  exit
  ;;
esac

if [[ -z ${slack_message_ts} ]]; then
  slack_message_ts=$(
    conversations_history |
      jq -rc ".messages[]|[.ts,.user,.reply_count,.text]|@tsv" |
      fzf --select-1 |
      awk -F"\t" '{print$1}'
  )
fi

case ${slack_cmd} in
chat_post_message__reply)
  chat_post_message
  exit
  ;;
reactions_add)
  reactions_add
  exit
  ;;
conversations_replies)
  conversations_replies |
    jq -rc ".messages[]|[.ts,.user,.text]|@tsv"
  exit
  ;;
*)
  echo "[E]: unsupported command: ${slack_cmd}" >&2
  exit 1
  ;;
esac
